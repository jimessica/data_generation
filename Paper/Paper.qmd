---
title: "A Muddled Data Generation Process"
author: Jessica Im
format: pdf
editor: visual
date: today
date-format: long
number-sections: true
bibliography: references.bib
---

## Hypothesizing and Understanding the Task

Before simulating, I wanted to gain a better understanding of the question and how the distribution would be manipulated by the changes made in steps 1-3. To do so, I sketched what the distribution would look like before and throughout each change. This sketch can be found at [Sketches.png](https://github.com/jimessica/data_generation/blob/main/Sketches.png). In my sketching, I realized that step 1, in which 100 of the 1000 observations are actually a repeat of the first 100 would not affect the normality of the distribution, since these first 100 observations should still be randomly distributed along the data. However, if I were to analyze this data under the impression that each observation is independent, my analysis would not be valid.

## Simulating the Data

To simulate the data, I first set the seed at 250 and then created a normal distribution with 900 observations and a mean and standard deviation of one by using rnorm(). Next, I needed to duplicate the first 100 observations and duplicate them. To do so, I created a variable of the first 100 observations and created a completed dataframe of the initially simulated and repeated data called full_sample.

Next, I needed to randomly select half of the negative observations and make them positive. I used ChatGPT to find out how to select all the negative values. Once I had all negative observations, I found the number of these observations using length() and divided that by 2. Next, I randomly sampled half of the number of observations from all of the negative observations and created a variable called num_to_change. Finally, I asked ChatGPT how to change the num_to_change numbers in full_sample to positive numbers.

To change the decimal place on the values between 1 and 1.1, I need to remove 1 from all the values. First, I create a variable that encompasses all the numbers between 1 and 1.1. Then I followed the same method that was used to change the negative numbers.

Finally, to check the mean and whether it is above 0. I created a variable called mean_cleaned_data which is the mean of the full_sample.

## LLM Usage

Me: If I have a dataset called full_sample with an unknown number of negative numbers and an unknown number of positive numbers in R, how do I select all of the negative numbers in this dataset.

ChatGPT: To select all the negative numbers from a dataset called full_sample in R, you can use the following code: "negative_numbers \<- full_sample\[full_sample \< 0\]". This code will create a new vector or subset called negative_numbers containing only the negative numbers from the full_sample dataset.

Me: This is my code so far: [Insert my code from beginning to Step 2.1]. How would I change the num_to_change in full_sample from their current negative numbers to positive in R using only the package tidyverse?

ChatGPT: To change the negative numbers in num_to_change to positive within the full_sample dataframe using the tidyverse package, you can directly use the mutate() function along with ifelse() to conditionally replace the values. Here's how you can do it: "full_sample \<- full_sample %\>% mutate(obs_value = ifelse(obs_value %in% num_to_change, abs(obs_value), obs_value))". In this code: mutate() is used to modify the obs_value column of the full_sample dataframe. ifelse() is a conditional function that checks if each value in the obs_value column is present in num_to_change. If it is, it replaces the value with its absolute value using abs(). If not, it keeps the original value unchanged. This code will effectively change half of the negative values in num_to_change to positive within the full_sample dataframe.
